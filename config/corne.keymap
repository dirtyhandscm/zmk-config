/*
 * copyright (c) 2020 the zmk contributors
 *
 * spdx-license-identifier: mit
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

/ {


        behaviors {
                td_mt: tap_dance_mod_tap {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_MOD_TAP";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&mt LSHIFT CAPSLOCK>, <&kp LCTRL>;
        };
                
        };

        keymap {
                compatible = "zmk,keymap";

                default_layer {
// -----------------------------------------------------------------------------------------
// |  tab |  q  |  w  |  e  |  r  |  t  |   |  y  |  u   |  i  |  o  |  p  | bksp |
// | ctrl |  a  |  s  |  d  |  f  |  g  |   |  h  |  j   |  k  |  l  |  ;  |  '   |
// | shft |  z  |  x  |  c  |  v  |  b  |   |  n  |  m   |  ,  |  .  |  /  | esc  |
//                    | gui | lwr | spc |   | ent | rse  | alt |
                        bindings = <
   &kp tab   &kp q &kp w &kp e &kp r &kp t   &kp y &kp u  &kp i     &kp o   &kp p    &kp bspc
   &kp lctrl &kp a &kp s &kp d &kp f &kp g   &kp h &kp j  &kp k     &kp l   &kp semi &kp sqt
   &td_mt &kp z &kp x &kp c &kp v &kp b   &kp n &kp m  &kp comma &kp dot &kp fslh &kp esc
                  &kp lgui &mo 1 &kp space   &kp ret &mo 2 &kp ralt
                        >;
                };
                lower_layer {
// -----------------------------------------------------------------------------------------
// |  tab |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | bksp |
// | btclr| bt1 | bt2 | bt3 | bt4 | bt5 |   | lft | dwn |  up | rgt |     |      |
// | shft |     |     |     |     |     |   |     |     |     |     |     |      |
//                    | gui |     | spc |   | ent |     | alt |
                        bindings = <
   &kp tab    &kp n1       &kp n2       &kp n3       &kp n4       &kp n5         &kp n6   &kp n7   &kp n8 &kp n9    &kp n0 &kp bspc
   &bt bt_clr &bt bt_sel 0 &bt bt_sel 1 &bt bt_sel 2 &bt bt_sel 3 &bt bt_sel 4   &kp left &kp down &kp up &kp right &trans &trans
   &kp lshft  &trans       &trans       &trans       &trans       &trans         &trans   &trans   &trans &trans    &trans &trans
                          	        &kp lgui     &trans       &kp space      &kp ret  &trans   &kp ralt
                        >;
                };

                raise_layer {
// -----------------------------------------------------------------------------------------
// |  tab |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | bksp |
// | ctrl |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
// | shft |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
//                    | gui |     | spc |   | ent |     | alt |
                        bindings = <
   &kp  tab  &kp excl &kp at &kp hash &kp dllr &kp prcnt   &kp caret &kp amps  &kp kp_multiply &kp lpar &kp rpar &kp bspc
   &kp lctrl &trans   &trans &trans   &trans   &trans      &kp minus &kp equal &kp lbkt        &kp rbkt &kp bslh &kp grave
   &kp lshft &trans   &trans &trans   &trans   &trans      &kp under &kp plus  &kp lbrc        &kp rbrc &kp pipe &kp tilde
                    	     &kp lgui &trans   &kp space   &kp ret   &trans    &kp ralt
                        >;
                };
        };
};
